{"version":3,"sources":["components/ShowCustomers.jsx","components/validation.js","components/AddCustomer.jsx","App.js","reportWebVitals.js","index.js"],"names":["ShowCustomers","useState","showCustomers","setShow","name","email","contactNo","address","customers","setCustomers","showCustomerInfo","taggle","fetch","then","res","ok","json","jsonRes","count","class","id","onClick","type","value","className","map","customer","_id","axios","delete","alert","window","location","reload","validation","errors","test","error","AddCustomer","setCustomer","setErrors","dataIsCorrect","setDataIsCorrect","handleChange","e","target","prevInput","useEffect","Object","keys","length","newCustomer","post","onSubmit","preventDefault","for","onChange","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ac2144b4.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport React from \"react\";\r\nimport { useState } from 'react';\r\n\r\nfunction ShowCustomers(){\r\n    \r\n            const [showCustomers, setShow]=useState(false)\r\n\r\n            const [customers, setCustomers] = useState([{\r\n                name: 'loading...',\r\n                email: 'loading...',\r\n                contactNo: 'loading...',\r\n                address: 'loading...'\r\n            }])\r\n\r\n            function showCustomerInfo(taggle){\r\n                if(taggle){\r\n                    fetch('/allCustomers').then(res => {\r\n                        if (res.ok) {\r\n                            return res.json()\r\n                        }\r\n                    }).then(jsonRes => setCustomers(jsonRes))\r\n                    setShow(true)\r\n                } else {\r\n                    setShow(false)\r\n                }\r\n            }\r\n            \r\n            function removeCustomer(id){\r\n                axios.delete('/removeCustomer/'+id);\r\n                // console.log(id);\r\n                alert(\"---- Customer has been removed from record ----\");\r\n                window.location.reload()\r\n            }             \r\n            let count=1;\r\n    return(\r\n        <div>\r\n            <center>\r\n            <div class=\"table_buttons\">\r\n                <input id=\"table_button\" onClick={()=>showCustomerInfo(true)} class=\"button\" type=\"submit\" value=\"Show customers\" />\r\n                <input id=\"table_button\" onClick={()=>showCustomerInfo(false)} class=\"button\" type=\"submit\" value=\"Hide customers\" />\r\n            </div>\r\n            {showCustomers&&\r\n              <div class=\"customers\">\r\n           \r\n                    <table className=\"col-12\">\r\n\r\n                        <thead>\r\n                            <tr class=\"table_header\">\r\n                                <th>No.</th>\r\n                                <th>Name</th>\r\n                                <th>Email</th>\r\n                                <th>Contact No.</th>\r\n                                <th>Address</th>\r\n                                <th>Action</th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        {customers.map(customer => {\r\n                            return (\r\n                            \r\n                            <tr>\r\n                                <td>{count++}</td>\r\n                                <td>{customer.name}</td>\r\n                                <td>{customer.email}</td>\r\n                                <td>{customer.contactNo}</td>\r\n                                <td>{customer.address}</td> \r\n                                <td> <input id=\"table_button\" onClick={()=>removeCustomer(customer._id)} class=\"button\" type=\"submit\" value=\"Delete\" /></td>                        \r\n                            </tr>\r\n                                   \r\n                            )\r\n                            })\r\n                        }\r\n\r\n                     </table>\r\n\r\n                </div>\r\n            }\r\n            </center>\r\n        </div>\r\n        \r\n\r\n    )\r\n}\r\nexport default ShowCustomers;","\r\nconst validation=(customer)=>{\r\n    let errors={};\r\n\r\n    if(!customer.name){\r\n        errors.error=\"Name is required\"\r\n    }else if(!customer.email){\r\n        errors.error=\"Email is invalid\"\r\n    }else if(!/\\S+@\\S+\\.\\S+/.test(customer.email)){\r\n        errors.error=\"Email is invalid\"\r\n    }else if(!customer.contactNo){\r\n        errors.error=\"Contact number is invalid\"\r\n    }else if(!/^[0][1-9]\\d{9}$|^[1-9]\\d{9}$/.test(customer.contactNo)){\r\n        errors.error=\"Contact number is invalid\"\r\n    }else if(!customer.address){\r\n        errors.error=\"Address is required\"\r\n    }\r\n    \r\n    return errors;   \r\n};\r\n\r\nexport default validation;","import React, { useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport {useState} from 'react';\r\nimport validation from './validation';\r\n\r\nfunction AddCustomer(){\r\n\r\n    const [customer, setCustomer] = useState([{\r\n        name: '',\r\n        email: '',\r\n        contactNo: '',\r\n        address: ''\r\n    }])\r\n\r\n    const [errors, setErrors] = useState({});\r\n    const [dataIsCorrect, setDataIsCorrect] = useState(false);\r\n\r\n    function handleChange(e){\r\n        const{name,value}=e.target;\r\n        setCustomer(prevInput=>{\r\n          return(\r\n            {\r\n              ...prevInput,\r\n              [name]:value\r\n            }\r\n          )\r\n        })\r\n      }\r\n    \r\n    useEffect(()=>{\r\n      if(Object.keys(errors).length===0&&dataIsCorrect){\r\n        const newCustomer={\r\n            name: customer.name ,\r\n            email: customer.email,\r\n            contactNo: customer.contactNo,\r\n            address: customer.address\r\n        }\r\n        axios.post('/addCustomer',newCustomer);\r\n        setCustomer({\r\n            name: '',\r\n            email: '',\r\n            contactNo: '',\r\n            address: ''\r\n        });\r\n        alert(\"---- New customer added ----\");\r\n        window.location.reload();\r\n      }\r\n    },[errors]);\r\n\r\n      function addCustomer(e){\r\n        e.preventDefault();\r\n        setErrors(validation(customer));\r\n        setDataIsCorrect(true);\r\n    }\r\n        \r\n\r\n    return(\r\n        <div class=\"addCustomer\">            \r\n            <form onSubmit={addCustomer} class=\"form\">\r\n                \r\n              <div class=\"inline\">\r\n              <label for=\"name\">Name:&nbsp; </label>\r\n              <input onChange={handleChange} type=\"text\" name=\"name\" value={customer.name} />          \r\n              </div>\r\n\r\n              <div class=\"inline\">\r\n              <label for=\"email\">Email:&nbsp;</label>\r\n              <input onChange={handleChange} type=\"text\" name=\"email\" value={customer.email} />    \r\n              </div>\r\n\r\n              <div class=\"inline\">\r\n              <label for=\"text\">Contact No.&nbsp;</label>\r\n              <input onChange={handleChange} type=\"text\"  name=\"contactNo\" value={customer.contactNo} />             \r\n              </div>\r\n\r\n              <div class=\"inline\">\r\n              <label for=\"address\">Address:&nbsp;</label>\r\n              <input onChange={handleChange} type=\"text\" name=\"address\" value={customer.address} />\r\n              </div>\r\n              \r\n              <div class=\"inline form-button\">          \r\n              <input class=\"button\" type=\"submit\" value=\"Add Customer\" />\r\n              </div><br/>\r\n        \r\n            </form>\r\n            <p class=\"form-error\">{errors.error}.</p>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default AddCustomer;","import ShowCustomers from './components/ShowCustomers';\r\nimport AddCustomer from './components/AddCustomer';\r\nfunction App() {\r\n    return ( \r\n        <div className = \"App\" >\r\n                <center><h2 id=\"title\">CUSTOMER PANEL</h2>\r\n                <AddCustomer/>   \r\n                <ShowCustomers/>\r\n                </center>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\n\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}